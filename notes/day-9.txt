1. Java Inner class
2. Reflection
3. Functional Interface
4. Method Reference
5. Lambda expression and stream() API

6. Spring
7. IOC and DI in Spring
8. SpringBoot
9. Hibernate

10. React JS

Class within a class



HashMap => HashSet


class HashMap<TKey,TValue>{
	class Entry<TKey,TValue>{
	}
	private HashSet<Entry<TKey,TValue>> entries;
	public void put(TKey key, TValue value){
		//creates an entry
		//adds the entry in the collection of entries
	}
	public HashSet<Entry<TKey,TValue>> entrySet(){
	}
}

Map<Integer, String> map = new HashMap<Integer, String>();
map.put(1,"mysore");

HashSet<Entry<Integer,String>> entries = map.entrySet();

Class within a class => nested class
a. non-static nested class: Inner class
class A{
	class B{
	}
}

Anonymous Class:

b. static nested class
class A{
	static class B{
	}
}

1. Create a Java project: functionalinterfacedemo
2. add a new interface file: PrintLogic.java
   interface: PrintLogic
3. create an abstract method
	return type: void
	argument: One, of type String

4. create an anonymous class implementing that abstract method
5. after main method, create one more static method with return type void and accepts two arguments of type "PrintLogic" interface and of type String
6. from this method, use the argument variable of interface to call the interface method and pass the second argument to that method
7. from main method call this new static method and pass two arguments: the interface variable in the main method and a string value

2. add a new interface file: CalculationLogic.java
   interface: CalculationLogic
3. create an abstract method
	return type: int
	argument: two, both of type int

functional interfaces in Java
java.util.function
	- Function
	- Predicate
	- Consumer
	- BiConsumer
	- BiFunction










